// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "KubeChat Support Team",
            "url": "https://github.com/pramodksahoo/kubechat",
            "email": "support@kubechat.dev"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/commands/approvals/pending": {
            "get": {
                "description": "List all pending command approvals that require user decision",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commands"
                ],
                "summary": "Get pending approvals",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CommandApproval"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/approve": {
            "post": {
                "description": "Approve a command execution that requires approval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commands"
                ],
                "summary": "Approve command execution",
                "parameters": [
                    {
                        "description": "Approval request",
                        "name": "approval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CommandApprovalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CommandApproval"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Approval not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/execute": {
            "post": {
                "description": "Execute a Kubernetes command with safety checks and approval workflow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commands"
                ],
                "summary": "Execute a Kubernetes command",
                "parameters": [
                    {
                        "description": "Command execution request",
                        "name": "command",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CommandExecutionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KubernetesCommandExecution"
                        }
                    },
                    "202": {
                        "description": "Command requires approval",
                        "schema": {
                            "$ref": "#/definitions/models.CommandApproval"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/executions": {
            "get": {
                "description": "List command executions with optional filtering by status and user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commands"
                ],
                "summary": "List command executions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of executions with pagination info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/executions/{executionId}/rollback/plan": {
            "post": {
                "description": "Create a rollback plan for a completed command execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rollback"
                ],
                "summary": "Create rollback plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command Execution ID",
                        "name": "executionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.RollbackPlan"
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID or execution not eligible for rollback",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/executions/{executionId}/rollback/validate": {
            "get": {
                "description": "Check if a command execution is eligible for rollback",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rollback"
                ],
                "summary": "Validate rollback eligibility",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command Execution ID",
                        "name": "executionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RollbackValidation"
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/executions/{id}": {
            "get": {
                "description": "Retrieve details of a command execution by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Commands"
                ],
                "summary": "Get command execution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Execution ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KubernetesCommandExecution"
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/health": {
            "get": {
                "description": "Check the health of command execution services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/commands/stats": {
            "get": {
                "description": "Get command execution statistics and analytics for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get execution statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (RFC3339 format)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339 format)",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ExecutionStats"
                        }
                    },
                    "400": {
                        "description": "Invalid date format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/rollback/executions/{rollbackId}/status": {
            "get": {
                "description": "Get the current status and progress of a rollback execution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rollback"
                ],
                "summary": "Get rollback status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rollback Execution ID",
                        "name": "rollbackId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RollbackStatus"
                        }
                    },
                    "400": {
                        "description": "Invalid rollback ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rollback not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/rollback/plans/{planId}/execute": {
            "post": {
                "description": "Execute a rollback plan to revert a command execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rollback"
                ],
                "summary": "Execute rollback plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rollback Plan ID",
                        "name": "planId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/models.RollbackExecution"
                        }
                    },
                    "400": {
                        "description": "Invalid plan ID or plan not executable",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Plan not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/audit/dangerous": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves audit logs for operations classified as dangerous",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get dangerous operations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dangerous operations retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve dangerous operations",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/failed": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves audit logs for operations that failed during execution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get failed operations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Failed operations retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve failed operations",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs a health check on the audit service and returns operational status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Check audit service health",
                "responses": {
                    "200": {
                        "description": "Audit service is operational",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Audit service health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves audit logs with optional filtering by user, session, safety level, status, and time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get audit logs with filtering",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to filter by",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session ID to filter by",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Safety level (safe, warning, dangerous)",
                        "name": "safety_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Execution status (success, failed, cancelled)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results (1-1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve audit logs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new audit log entry for tracking user actions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Create a new audit log entry",
                "parameters": [
                    {
                        "description": "Audit log data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuditLogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Audit log created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create audit log",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/logs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific audit log entry by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get audit log by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Audit log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit log retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid audit log ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Audit log not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns performance metrics and statistics for the audit service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get audit service metrics",
                "responses": {
                    "200": {
                        "description": "Audit service metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get audit metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns summary statistics and analytics for audit logs within a time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Get audit log summary statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time for summary (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time for summary (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit log summary retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get audit log summary",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/audit/verify-integrity": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifies the integrity of audit logs within a specified ID range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit \u0026 Compliance"
                ],
                "summary": "Verify audit log integrity",
                "parameters": [
                    {
                        "description": "Integrity verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "end_id": {
                                    "type": "integer"
                                },
                                "start_id": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Integrity verification completed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format or ID range",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Integrity check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all users (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific user (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with username/email and password, returns session token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login authentication",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with session token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Login failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out the current user and invalidates their session token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Authorization header required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Logout failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns basic information about the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user info",
                "responses": {
                    "200": {
                        "description": "Current user information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to extract user context",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed profile information for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get user profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes an existing session token with a new one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh user session",
                "parameters": [
                    {
                        "description": "Session refresh request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session refreshed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Token is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Session expired or invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Refresh failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with username, email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user account",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Registration failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/broadcast": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Broadcasts a message to all instances of a specific service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Broadcast message to all service instances",
                "parameters": [
                    {
                        "description": "Broadcast message request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BroadcastMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message broadcasted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid broadcast message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Broadcast failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/call": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Makes a call to another service using service discovery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Make an inter-service call",
                "parameters": [
                    {
                        "description": "Service call request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service call successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid service call request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Service call failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/circuit-breakers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the status of all circuit breakers in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get circuit breaker status",
                "responses": {
                    "200": {
                        "description": "Circuit breaker status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/circuit-breakers/{serviceName}/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets a specific circuit breaker to closed state",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Reset a circuit breaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Circuit breaker reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Service name is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/events/publish": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publishes an event to the event system for subscribers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Publish a service event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServiceEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event published successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid event data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Event publish failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/events/subscribe": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribes to events of a specific type in the event system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Subscribe to service events",
                "parameters": [
                    {
                        "description": "Subscription request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "event_type": {
                                    "type": "string"
                                },
                                "webhook_url": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully subscribed to events",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid subscription request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Subscription failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/health": {
            "get": {
                "description": "Returns health status and feature information for the communication service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get communication service health",
                "responses": {
                    "200": {
                        "description": "Communication service health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/load-balancer/strategies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns available load balancing strategies and their descriptions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get load balancing strategies",
                "responses": {
                    "200": {
                        "description": "Available load balancing strategies",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/load-balancer/test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests load balancing distribution for a specific service and strategy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Test load balancing strategy",
                "parameters": [
                    {
                        "description": "Load balancing test request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "requests": {
                                    "type": "integer"
                                },
                                "service_name": {
                                    "type": "string"
                                },
                                "strategy": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Load balancing test results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid test request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns metrics and statistics for service-to-service communication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get service communication metrics",
                "responses": {
                    "200": {
                        "description": "Communication metrics and statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/patterns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns available communication patterns and their configurations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get communication patterns",
                "responses": {
                    "200": {
                        "description": "Available communication patterns",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all services registered in the service registry",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "List all registered services",
                "responses": {
                    "200": {
                        "description": "List of all services",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/services/discover/{serviceName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all available instances of a specific service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Discover service instances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name to discover",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service instances found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Service name is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/services/healthy/{serviceName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns only healthy instances of a specific service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Get healthy service instances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Healthy service instances",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Service name is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No healthy services found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/services/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new service instance for service discovery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Register a new service instance",
                "parameters": [
                    {
                        "description": "Service registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServiceRegistration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Service registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid service registration data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Service registration failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/communication/services/{serviceId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a service instance from the service registry",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service Communication"
                ],
                "summary": "Deregister a service instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service instance ID",
                        "name": "serviceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deregistered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Service ID is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/backups": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiates a database backup operation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Create database backup",
                "parameters": [
                    {
                        "description": "Backup configuration",
                        "name": "backup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabaseBackup"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Backup creation initiated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid backup configuration",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Backup creation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/backups/{backupId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns status information for a specific backup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get backup status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID",
                        "name": "backupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Backup status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Backup not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/backups/{backupId}/restore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restores a database from a backup to a target instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Restore from backup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID",
                        "name": "backupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Restore request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "target_instance_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Restore initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid restore request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Restore failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about all database clusters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get all database clusters",
                "responses": {
                    "200": {
                        "description": "List of database clusters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get database clusters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new database cluster configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Create database cluster",
                "parameters": [
                    {
                        "description": "Database cluster configuration",
                        "name": "cluster",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabaseCluster"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Database cluster created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid cluster format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create database cluster",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about a specific database cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get specific database cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Database cluster information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Database cluster not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}/connection/read": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests connectivity to read-only database instances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Test read-only connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Read-only connection successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Read-only connection failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}/connection/write": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Tests connectivity to read-write database instances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Test read-write connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Read-write connection successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Read-write connection failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}/failover": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Triggers a manual failover for a database cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Trigger database failover",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Failover initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to trigger failover",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}/failover-status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checks if a failover is currently in progress for a cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Check failover status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Failover status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to check failover status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/clusters/{clusterId}/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns health status for a database cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get cluster health status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database cluster ID",
                        "name": "clusterId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cluster health information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get cluster health",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/health": {
            "get": {
                "description": "Returns health status and feature information for the database service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get database service health",
                "responses": {
                    "200": {
                        "description": "Database service health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/instances": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about all registered database instances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get all database instances",
                "responses": {
                    "200": {
                        "description": "List of database instances",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get database instances",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new database instance in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Register database instance",
                "parameters": [
                    {
                        "description": "Database instance configuration",
                        "name": "instance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabaseInstance"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Database instance registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid instance format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to register database instance",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/instances/{instanceId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about a specific database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get specific database instance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Database instance information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Database instance not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/instances/{instanceId}/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs a health check on a specific database instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Check database instance health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Database health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns performance metrics and statistics for database operations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get database metrics",
                "responses": {
                    "200": {
                        "description": "Database metrics and statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/migrations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns status of all database migrations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get migration status",
                "responses": {
                    "200": {
                        "description": "Migration status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get migration status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Applies a database migration to update schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Apply database migration",
                "parameters": [
                    {
                        "description": "Migration configuration",
                        "name": "migration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabaseMigration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Migration applied successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid migration format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Migration failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/pools": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about all database connection pools",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get all connection pools",
                "responses": {
                    "200": {
                        "description": "List of connection pools",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get connection pools",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new database connection pool with specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Create database connection pool",
                "parameters": [
                    {
                        "description": "Database configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DatabaseConfig"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Connection pool created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid configuration format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create connection pool",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/pools/{poolId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about a specific database connection pool",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get specific connection pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection pool ID",
                        "name": "poolId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection pool information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Connection pool not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Destroys a database connection pool and closes all connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Destroy connection pool",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection pool ID",
                        "name": "poolId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection pool destroyed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to destroy connection pool",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/pools/{poolId}/query": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a SQL query on a specific connection pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Execute database query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection pool ID",
                        "name": "poolId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "args": {
                                    "type": "array",
                                    "items": {}
                                },
                                "query": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query executed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Query execution failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/pools/{poolId}/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed statistics for a specific connection pool",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Get connection pool statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection pool ID",
                        "name": "poolId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection pool statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pool not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/database/pools/{poolId}/transaction": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes multiple SQL operations as a single transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database Management"
                ],
                "summary": "Execute database transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection pool ID",
                        "name": "poolId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "operations": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.QueryInfo"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction executed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid transaction request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Transaction execution failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/external/cost/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns comprehensive cost summary for external API usage with breakdown by provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "External API Cost Management"
                ],
                "summary": "Get API usage cost summary",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cost summary with provider breakdown",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get cost summary",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/external/health": {
            "get": {
                "description": "Returns comprehensive health status for all external API providers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "External API Health"
                ],
                "summary": "Get overall external API health status",
                "responses": {
                    "200": {
                        "description": "External APIs healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/external/health/{apiName}": {
            "get": {
                "description": "Returns detailed health information for a specific external API provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "External API Health"
                ],
                "summary": "Get specific API provider health status",
                "parameters": [
                    {
                        "enum": [
                            "openai",
                            "anthropic",
                            "google",
                            "ollama"
                        ],
                        "type": "string",
                        "description": "API provider name",
                        "name": "apiName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API provider health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/circuit-breakers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns status information for all circuit breakers in the gateway",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Get circuit breaker status",
                "responses": {
                    "200": {
                        "description": "Circuit breaker status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/circuit-breakers/{service}/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets a specific circuit breaker to closed state",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Reset circuit breaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Circuit breaker reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Service name is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/circuit-breakers/{service}/trip": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually trips a circuit breaker for testing purposes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Trip circuit breaker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reason for tripping",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Circuit breaker tripped successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs a health check on the API Gateway service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Check API Gateway health",
                "responses": {
                    "200": {
                        "description": "API Gateway is operational",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Gateway health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns comprehensive metrics and performance statistics for the API Gateway",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Get API Gateway metrics",
                "responses": {
                    "200": {
                        "description": "API Gateway metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/rate-limits": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns current rate limit status and statistics for all clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Get rate limit status",
                "responses": {
                    "200": {
                        "description": "Rate limit status for all clients",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/rate-limits/reset-all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets rate limit counters for all clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Reset all rate limits",
                "responses": {
                    "200": {
                        "description": "All rate limits reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/rate-limits/{client_ip}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets the rate limit counter for a specific client IP address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Reset rate limit for client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client IP address",
                        "name": "client_ip",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rate limit reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Client IP is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/gateway/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed status information including metrics, rate limits, and configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Gateway"
                ],
                "summary": "Get comprehensive gateway status",
                "responses": {
                    "200": {
                        "description": "Comprehensive gateway status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns basic health status and uptime information for the API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "API health check",
                "responses": {
                    "200": {
                        "description": "API health status",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/": {
            "get": {
                "description": "Returns comprehensive health status of all system components",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Get overall system health status",
                "responses": {
                    "200": {
                        "description": "System healthy",
                        "schema": {
                            "$ref": "#/definitions/models.HealthStatus"
                        }
                    },
                    "500": {
                        "description": "Health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "System degraded or unhealthy",
                        "schema": {
                            "$ref": "#/definitions/models.HealthStatus"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Simple liveness check for Kubernetes pod health monitoring",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Kubernetes liveness probe endpoint",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/cluster": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns basic information about the connected Kubernetes cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get Kubernetes cluster information",
                "responses": {
                    "200": {
                        "description": "Cluster information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get cluster information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifies connectivity to the Kubernetes cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Check Kubernetes connectivity",
                "responses": {
                    "200": {
                        "description": "Kubernetes cluster is accessible",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Kubernetes cluster not accessible",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all available namespaces in the Kubernetes cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List Kubernetes namespaces",
                "responses": {
                    "200": {
                        "description": "List of namespaces",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list namespaces",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/configmaps": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all ConfigMaps in the specified namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List ConfigMaps in namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of ConfigMaps",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list ConfigMaps",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/configmaps/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific ConfigMap",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get specific ConfigMap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ConfigMap name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ConfigMap information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "ConfigMap not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/deployments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all deployments in the specified namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List deployments in namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deployments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list deployments",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/deployments/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific deployment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get specific deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deployment name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Deployment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/deployments/{name}/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restarts all pods in a deployment by triggering a rollout",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Restart a deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deployment name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment restart initiated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Operation not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to restart deployment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/deployments/{name}/scale": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Scales a deployment to the specified number of replicas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Scale a deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deployment name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Scaling request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "replicas": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment scaling initiated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Operation not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to scale deployment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/pods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all pods in the specified namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List pods in namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pods",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list pods",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/pods/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific pod",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get specific pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pod information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Pod not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific pod from the cluster (dangerous operation)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Delete a pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pod deletion initiated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Operation not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete pod",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/pods/{name}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns logs from a specific pod and container",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get pod logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pod name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of lines to tail",
                        "name": "tail_lines",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include timestamps in logs",
                        "name": "timestamps",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specific container name",
                        "name": "container",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pod logs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get pod logs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/secrets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns metadata for all Secrets in the namespace (data is not exposed)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List Secrets in namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Secret metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list Secrets",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all services in the specified namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "List services in namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of services",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to list services",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/namespaces/{namespace}/services/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Get specific service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/kubernetes/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates if a Kubernetes operation is allowed and safe to execute",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kubernetes Operations"
                ],
                "summary": "Validate Kubernetes operation",
                "parameters": [
                    {
                        "description": "Operation to validate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KubernetesOperation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation validation result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Operation not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/classify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Classifies the safety level and risk of a kubectl command without full processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Classify command safety level",
                "parameters": [
                    {
                        "description": "Command classification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Command classified successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Classification error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs a health check on the NLP service and providers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Check NLP service health",
                "responses": {
                    "200": {
                        "description": "NLP service is operational",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "NLP service health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns performance metrics and statistics for NLP operations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Get NLP service metrics",
                "responses": {
                    "200": {
                        "description": "NLP service metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get NLP metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/process": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Processes a natural language query and converts it to Kubernetes commands",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Process natural language query",
                "parameters": [
                    {
                        "description": "NLP query request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cluster_info": {
                                    "type": "string"
                                },
                                "context": {
                                    "type": "string"
                                },
                                "provider": {
                                    "type": "string"
                                },
                                "query": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query processed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "NLP processing error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of available NLP providers and their status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Get supported NLP providers",
                "responses": {
                    "200": {
                        "description": "List of supported NLP providers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get supported providers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/nlp/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates a kubectl command for safety, correctness, and potential risks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI \u0026 NLP Services"
                ],
                "summary": "Validate kubectl command",
                "parameters": [
                    {
                        "description": "Command validation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Command validated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Command validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/performance/cache/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns cache performance statistics and hit/miss ratios",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get cache statistics",
                "responses": {
                    "200": {
                        "description": "Cache statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/performance/cache/{key}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a value from the cache by key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get cache value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache value retrieved",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Cache key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stores a value in the cache with optional TTL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Set cache value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cache value and TTL",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "ttl": {
                                    "type": "integer"
                                },
                                "value": {}
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache value set successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to set cache value",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a value from the cache by key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Delete cache value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cache key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache value deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete cache value",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/performance/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns health status of performance monitoring systems",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get performance system health",
                "responses": {
                    "200": {
                        "description": "Performance system health",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/performance/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns system performance metrics and statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get performance metrics",
                "responses": {
                    "200": {
                        "description": "Performance metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/alerts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns current security alerts and warnings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get security alerts",
                "responses": {
                    "200": {
                        "description": "Security alerts list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get security alerts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/analyze-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Analyzes an HTTP request for suspicious activity and security threats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Analyze request for threats",
                "parameters": [
                    {
                        "description": "Request analysis data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "string"
                                },
                                "headers": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "ip_address": {
                                    "type": "string"
                                },
                                "method": {
                                    "type": "string"
                                },
                                "path": {
                                    "type": "string"
                                },
                                "session_id": {
                                    "type": "string"
                                },
                                "user_agent": {
                                    "type": "string"
                                },
                                "user_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request analysis results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Analysis failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns security events with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get security events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Security events list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get security events",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Records a security event for monitoring and analysis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Record security event",
                "parameters": [
                    {
                        "description": "Security event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SecurityEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Security event recorded successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid event format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to record security event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/generate-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a cryptographically secure random token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Generate secure token",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 32,
                        "description": "Token length (1-128)",
                        "name": "length",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secure token generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid length parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/hash-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a secure bcrypt hash of the provided password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Hash password securely",
                "parameters": [
                    {
                        "description": "Password to hash",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password hashed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns health status of security subsystems",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get security system health",
                "responses": {
                    "200": {
                        "description": "Security system health",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/rate-limit/{identifier}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns current rate limit status for a specific identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Get rate limit status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rate limit identifier",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rate limit status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Rate limiter not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Resets the rate limit counter for a specific identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Reset rate limit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rate limit identifier",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rate limit reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/rate-limit/{identifier}/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checks if a request should be rate limited for a specific identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Check rate limit status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rate limit identifier (IP, user ID, etc.)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rate limit parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "limit": {
                                    "type": "integer"
                                },
                                "window": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rate limit check result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/scan": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiates a comprehensive security vulnerability scan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Start security vulnerability scan",
                "responses": {
                    "200": {
                        "description": "Security scan completed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Security scan failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/sessions/cleanup": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes expired sessions from the security system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Cleanup expired sessions",
                "responses": {
                    "200": {
                        "description": "Sessions cleaned up",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/validate-headers": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates HTTP security headers against security best practices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Validate security headers",
                "parameters": [
                    {
                        "description": "Headers to validate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "headers": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Header validation results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/security/validate-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates a password against the configured security policy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Security \u0026 Authorization"
                ],
                "summary": "Validate password against policy",
                "parameters": [
                    {
                        "description": "Password validation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string"
                                },
                                "policy": {
                                    "$ref": "#/definitions/models.PasswordPolicy"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password validation result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid password or policy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns comprehensive status information including service health",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Get detailed API status",
                "responses": {
                    "200": {
                        "description": "Detailed API status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/broadcast": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Broadcasts a message to all currently connected WebSocket clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Broadcast to all clients",
                "parameters": [
                    {
                        "description": "Broadcast message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "payload": {
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message broadcasted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Broadcast failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/broadcast/topics": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Broadcasts a message to all clients subscribed to specific topics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Broadcast to topic subscribers",
                "parameters": [
                    {
                        "description": "Topic broadcast message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "payload": {
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "topics": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message broadcasted to subscribers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No subscribers found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/broadcast/user/{user_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Broadcasts a message to all connections of a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Broadcast to specific user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Broadcast message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "payload": {
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message broadcasted to user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not connected",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/clients": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about all currently connected WebSocket clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Get connected WebSocket clients",
                "responses": {
                    "200": {
                        "description": "List of connected clients",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/clients/count": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the total number of currently connected WebSocket clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Get connected client count",
                "responses": {
                    "200": {
                        "description": "Client count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/clients/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Forcefully disconnects a specific WebSocket client",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Disconnect WebSocket client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client disconnected successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Client ID is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/clients/{id}/subscriptions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all topics that a specific client is subscribed to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Get client subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of client subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Client ID is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Performs a health check on the WebSocket service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Check WebSocket service health",
                "responses": {
                    "200": {
                        "description": "WebSocket service is operational",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "WebSocket service health check failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns performance metrics and statistics for WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Get WebSocket metrics",
                "responses": {
                    "200": {
                        "description": "WebSocket service metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/notify/system": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a system-wide notification to all connected clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Send system notification",
                "parameters": [
                    {
                        "description": "System notification data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "event_type": {
                                    "type": "string"
                                },
                                "priority": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "System notification sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/notify/user/{user_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a personal notification to a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Send user notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "additionalProperties": true
                                },
                                "message": {
                                    "type": "string"
                                },
                                "priority": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification sent to user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not connected",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/websocket/subscriptions/{topic}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all clients subscribed to a specific topic",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Get topic subscribers",
                "parameters": [
                    {
                        "enum": [
                            "commands",
                            "system",
                            "user_activity",
                            "alerts",
                            "metrics"
                        ],
                        "type": "string",
                        "description": "Topic name",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of topic subscribers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid topic",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Upgrades HTTP connection to WebSocket for real-time communication",
                "tags": [
                    "WebSocket Communication"
                ],
                "summary": "Upgrade to WebSocket connection",
                "responses": {
                    "101": {
                        "description": "WebSocket connection established"
                    },
                    "400": {
                        "description": "WebSocket upgrade failed"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.AuditLogRequest": {
            "type": "object",
            "required": [
                "execution_status",
                "generated_command",
                "query_text",
                "safety_level"
            ],
            "properties": {
                "cluster_context": {
                    "type": "string"
                },
                "execution_result": {
                    "type": "object",
                    "additionalProperties": true
                },
                "execution_status": {
                    "type": "string",
                    "enum": [
                        "success",
                        "failed",
                        "cancelled"
                    ]
                },
                "generated_command": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "namespace_context": {
                    "type": "string"
                },
                "query_text": {
                    "type": "string"
                },
                "safety_level": {
                    "type": "string",
                    "enum": [
                        "safe",
                        "warning",
                        "dangerous"
                    ]
                },
                "session_id": {
                    "type": "string"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.BackupStatus": {
            "type": "string",
            "enum": [
                "running",
                "completed",
                "failed",
                "expired"
            ],
            "x-enum-varnames": [
                "BackupStatusRunning",
                "BackupStatusCompleted",
                "BackupStatusFailed",
                "BackupStatusExpired"
            ]
        },
        "models.BackupType": {
            "type": "string",
            "enum": [
                "full",
                "incremental",
                "differential"
            ],
            "x-enum-varnames": [
                "BackupTypeFull",
                "BackupTypeIncremental",
                "BackupTypeDifferential"
            ]
        },
        "models.BroadcastMessage": {
            "type": "object",
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "payload": {},
                "service_name": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                }
            }
        },
        "models.ClusterHealth": {
            "type": "object",
            "properties": {
                "checked_at": {
                    "type": "string"
                },
                "connection_pools": {
                    "type": "integer"
                },
                "failover_active": {
                    "type": "boolean"
                },
                "last_failover": {
                    "type": "string"
                },
                "primary_healthy": {
                    "type": "boolean"
                },
                "replicas_healthy": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.DatabaseStatus"
                },
                "total_connections": {
                    "type": "integer"
                },
                "total_replicas": {
                    "type": "integer"
                }
            }
        },
        "models.CommandApproval": {
            "type": "object",
            "properties": {
                "approved_by_user_id": {
                    "type": "string"
                },
                "command_execution_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "decided_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "requested_by_user_id": {
                    "type": "string"
                },
                "status": {
                    "description": "pending, approved, rejected, expired",
                    "type": "string"
                }
            }
        },
        "models.CommandApprovalRequest": {
            "type": "object",
            "properties": {
                "decision": {
                    "description": "approve, reject",
                    "type": "string"
                },
                "execution_id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.CommandExecutionRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "$ref": "#/definitions/models.KubernetesOperation"
                },
                "safety_level": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ComponentHealth": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.HealthStatusEnum"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "viewer"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "models.DatabaseBackup": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "compressed": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "database_id": {
                    "type": "string"
                },
                "encrypted": {
                    "type": "boolean"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.BackupStatus"
                },
                "type": {
                    "$ref": "#/definitions/models.BackupType"
                }
            }
        },
        "models.DatabaseCluster": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "failover_config": {
                    "$ref": "#/definitions/models.FailoverConfig"
                },
                "health": {
                    "$ref": "#/definitions/models.ClusterHealth"
                },
                "id": {
                    "type": "string"
                },
                "load_balancer": {
                    "$ref": "#/definitions/models.LoadBalancer"
                },
                "name": {
                    "type": "string"
                },
                "primary": {
                    "$ref": "#/definitions/models.DatabaseInstance"
                },
                "replicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DatabaseInstance"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.DatabaseConfig": {
            "type": "object",
            "properties": {
                "conn_max_idle_time": {
                    "type": "string",
                    "format": "duration",
                    "example": "10m"
                },
                "conn_max_lifetime": {
                    "type": "string",
                    "format": "duration",
                    "example": "30m"
                },
                "database": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "max_idle_conns": {
                    "type": "integer"
                },
                "max_open_conns": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "read_timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                },
                "ssl_mode": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                },
                "user": {
                    "type": "string"
                },
                "write_timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                }
            }
        },
        "models.DatabaseHealthCheck": {
            "type": "object",
            "properties": {
                "active_connections": {
                    "type": "integer"
                },
                "checked_at": {
                    "type": "string"
                },
                "consecutive_fails": {
                    "type": "integer"
                },
                "idle_connections": {
                    "type": "integer"
                },
                "is_connected": {
                    "type": "boolean"
                },
                "last_error": {
                    "type": "string"
                },
                "response_time": {
                    "type": "string",
                    "format": "duration",
                    "example": "10ms"
                },
                "waiting_connections": {
                    "type": "integer"
                }
            }
        },
        "models.DatabaseInstance": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.DatabaseConfig"
                },
                "health": {
                    "$ref": "#/definitions/models.DatabaseHealthCheck"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_checked": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "role": {
                    "description": "\"primary\", \"replica\", \"standby\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DatabaseRole"
                        }
                    ]
                },
                "status": {
                    "$ref": "#/definitions/models.DatabaseStatus"
                }
            }
        },
        "models.DatabaseMigration": {
            "type": "object",
            "properties": {
                "applied": {
                    "type": "boolean"
                },
                "applied_at": {
                    "type": "string"
                },
                "checksum": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.DatabaseRole": {
            "type": "string",
            "enum": [
                "primary",
                "replica",
                "standby"
            ],
            "x-enum-varnames": [
                "DatabaseRolePrimary",
                "DatabaseRoleReplica",
                "DatabaseRoleStandby"
            ]
        },
        "models.DatabaseStatus": {
            "type": "string",
            "enum": [
                "healthy",
                "unhealthy",
                "maintenance",
                "unknown"
            ],
            "x-enum-varnames": [
                "DatabaseStatusHealthy",
                "DatabaseStatusUnhealthy",
                "DatabaseStatusMaintenance",
                "DatabaseStatusUnknown"
            ]
        },
        "models.ExecutionStats": {
            "type": "object",
            "properties": {
                "average_time_ms": {
                    "type": "number"
                },
                "failed_ones": {
                    "type": "integer"
                },
                "from": {
                    "type": "string"
                },
                "most_used_resource": {
                    "type": "string"
                },
                "successful_ones": {
                    "type": "integer"
                },
                "to": {
                    "type": "string"
                },
                "total_executions": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.FailoverConfig": {
            "type": "object",
            "properties": {
                "auto_failover": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "failover_timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "5m"
                },
                "failure_threshold": {
                    "type": "integer"
                },
                "health_check_interval": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                },
                "max_failover_attempts": {
                    "type": "integer"
                },
                "recovery_check_interval": {
                    "type": "string",
                    "format": "duration",
                    "example": "60s"
                }
            }
        },
        "models.GeoLocation": {
            "type": "object",
            "properties": {
                "asn": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "isp": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "proxy": {
                    "type": "boolean"
                },
                "region": {
                    "type": "string"
                },
                "suspicious": {
                    "type": "boolean"
                },
                "timezone": {
                    "type": "string"
                },
                "tor": {
                    "type": "boolean"
                },
                "vpn": {
                    "type": "boolean"
                }
            }
        },
        "models.HealthStatus": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.ComponentHealth"
                    }
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "$ref": "#/definitions/models.HealthStatusEnum"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.HealthStatusEnum": {
            "type": "string",
            "enum": [
                "healthy",
                "degraded",
                "unhealthy",
                "unknown"
            ],
            "x-enum-varnames": [
                "HealthStatusHealthy",
                "HealthStatusDegraded",
                "HealthStatusUnhealthy",
                "HealthStatusUnknown"
            ]
        },
        "models.KubernetesCommandExecution": {
            "type": "object",
            "properties": {
                "approval_id": {
                    "type": "string"
                },
                "command": {
                    "$ref": "#/definitions/models.KubernetesOperation"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "executed_at": {
                    "type": "string"
                },
                "execution_time_ms": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/models.KubernetesOperationResult"
                },
                "safety_level": {
                    "description": "safe, warning, dangerous",
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "description": "pending, approved, executing, completed, failed, timeout",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.KubernetesOperation": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.KubernetesOperationResult": {
            "type": "object",
            "properties": {
                "backup_data": {
                    "description": "For rollback support",
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "type": "string"
                },
                "executed_at": {
                    "type": "string"
                },
                "operation_id": {
                    "type": "string"
                },
                "previous_state": {
                    "description": "For rollback support",
                    "type": "object",
                    "additionalProperties": true
                },
                "result": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.LoadBalancer": {
            "type": "object",
            "properties": {
                "health_check_interval": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                },
                "max_retries": {
                    "type": "integer"
                },
                "read_write_split": {
                    "type": "boolean"
                },
                "replica_weight": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "strategy": {
                    "$ref": "#/definitions/models.LoadBalancingStrategy"
                }
            }
        },
        "models.LoadBalancingStrategy": {
            "type": "string",
            "enum": [
                "round_robin",
                "random",
                "least_connections",
                "weighted",
                "ip_hash"
            ],
            "x-enum-varnames": [
                "LoadBalancingRoundRobin",
                "LoadBalancingRandom",
                "LoadBalancingLeastConnections",
                "LoadBalancingWeighted",
                "LoadBalancingIPHash"
            ]
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.PasswordPolicy": {
            "type": "object",
            "properties": {
                "lockout_duration_minutes": {
                    "type": "integer"
                },
                "max_age_days": {
                    "type": "integer"
                },
                "max_attempts": {
                    "type": "integer"
                },
                "min_length": {
                    "type": "integer"
                },
                "prevent_reuse_count": {
                    "type": "integer"
                },
                "require_lowercase": {
                    "type": "boolean"
                },
                "require_numbers": {
                    "type": "boolean"
                },
                "require_special_chars": {
                    "type": "boolean"
                },
                "require_uppercase": {
                    "type": "boolean"
                }
            }
        },
        "models.QueryInfo": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {}
                },
                "duration": {
                    "type": "string",
                    "format": "duration",
                    "example": "10ms"
                },
                "error": {
                    "type": "string"
                },
                "sql": {
                    "type": "string"
                }
            }
        },
        "models.RollbackExecution": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "execution_log": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RollbackStepResult"
                    }
                },
                "id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "description": "executing, completed, failed, cancelled",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.RollbackPlan": {
            "type": "object",
            "properties": {
                "command_execution_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "estimated_duration": {
                    "type": "integer",
                    "format": "int64",
                    "example": 30000000000
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "original_command": {
                    "$ref": "#/definitions/models.KubernetesOperation"
                },
                "reason": {
                    "type": "string"
                },
                "rollback_steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RollbackStep"
                    }
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "description": "planned, executing, completed, failed, cancelled, invalid",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "validation": {
                    "$ref": "#/definitions/models.RollbackValidation"
                }
            }
        },
        "models.RollbackStatus": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "current_step": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "progress": {
                    "description": "completion percentage (0-100)",
                    "type": "number"
                },
                "rollback_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_steps": {
                    "type": "integer"
                }
            }
        },
        "models.RollbackStep": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "operation data (manifest, patch, etc.)",
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "description": "human readable description",
                    "type": "string"
                },
                "name": {
                    "description": "resource name",
                    "type": "string"
                },
                "namespace": {
                    "description": "resource namespace",
                    "type": "string"
                },
                "operation": {
                    "description": "create, delete, patch, scale",
                    "type": "string"
                },
                "resource": {
                    "description": "pods, services, deployments, etc.",
                    "type": "string"
                },
                "step_number": {
                    "type": "integer"
                }
            }
        },
        "models.RollbackStepResult": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "output": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "description": "executing, completed, failed",
                    "type": "string"
                },
                "step_number": {
                    "type": "integer"
                }
            }
        },
        "models.RollbackValidation": {
            "type": "object",
            "properties": {
                "checked_at": {
                    "type": "string"
                },
                "execution_id": {
                    "type": "string"
                },
                "is_valid": {
                    "type": "boolean"
                },
                "reasons": {
                    "description": "reasons why rollback is invalid",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "warnings": {
                    "description": "non-blocking warnings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SecurityAction": {
            "type": "string",
            "enum": [
                "allow",
                "block",
                "flag",
                "alert",
                "audit",
                "lockout"
            ],
            "x-enum-varnames": [
                "SecurityActionAllow",
                "SecurityActionBlock",
                "SecurityActionFlag",
                "SecurityActionAlert",
                "SecurityActionAudit",
                "SecurityActionLockout"
            ]
        },
        "models.SecurityEvent": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/models.SecurityAction"
                },
                "blocked": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.GeoLocation"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resolution": {
                    "type": "string"
                },
                "resolved_at": {
                    "type": "string"
                },
                "risk_score": {
                    "description": "0-100",
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                },
                "severity": {
                    "$ref": "#/definitions/models.SecuritySeverity"
                },
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.SecurityEventType"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.SecurityEventType": {
            "type": "string",
            "enum": [
                "login_attempt",
                "login_success",
                "login_failure",
                "logout",
                "password_change",
                "account_lockout",
                "suspicious_activity",
                "rate_limit_exceeded",
                "unauthorized_access",
                "data_breach",
                "injection_attempt",
                "brute_force_attempt",
                "csrf_attempt",
                "xss_attempt",
                "security_header_missing",
                "encryption_failure",
                "certificate_expiry"
            ],
            "x-enum-varnames": [
                "SecurityEventLoginAttempt",
                "SecurityEventLoginSuccess",
                "SecurityEventLoginFailure",
                "SecurityEventLogout",
                "SecurityEventPasswordChange",
                "SecurityEventAccountLockout",
                "SecurityEventSuspiciousActivity",
                "SecurityEventRateLimitExceeded",
                "SecurityEventUnauthorizedAccess",
                "SecurityEventDataBreach",
                "SecurityEventInjectionAttempt",
                "SecurityEventBruteForceAttempt",
                "SecurityEventCSRFAttempt",
                "SecurityEventXSSAttempt",
                "SecurityEventSecurityHeaderMissing",
                "SecurityEventEncryptionFailure",
                "SecurityEventCertificateExpiry"
            ]
        },
        "models.SecuritySeverity": {
            "type": "string",
            "enum": [
                "low",
                "medium",
                "high",
                "critical"
            ],
            "x-enum-varnames": [
                "SecuritySeverityLow",
                "SecuritySeverityMedium",
                "SecuritySeverityHigh",
                "SecuritySeverityCritical"
            ]
        },
        "models.ServiceEvent": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "data": {},
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.ServiceRegistration": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "description": "\"http\", \"https\", \"tcp\", \"grpc\"",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.ServiceRequest": {
            "type": "object",
            "properties": {
                "body": {},
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string",
                    "format": "duration",
                    "example": "30s"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Key for service-to-service communication",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header",
            "x-extension-openapi": "{\"example\": \"value\"}"
        },
        "BearerAuth": {
            "description": "Enter the token with the ` + "`" + `Bearer ` + "`" + ` prefix, e.g. \"Bearer abcde12345\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "KubeChat Enterprise Platform API",
	Description:      "Kubernetes-native AI platform with multi-provider support for enterprise deployments\n\nThis API provides comprehensive management capabilities for:\n- Kubernetes cluster operations and monitoring\n- Multi-provider AI/ML services (OpenAI, Anthropic, Google, Ollama)\n- Real-time WebSocket communication\n- Advanced cost tracking and budget management\n- Enterprise security and compliance features\n- Comprehensive audit logging and monitoring",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
