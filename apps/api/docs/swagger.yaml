basePath: /api/v1
definitions:
  handlers.HealthResponse:
    properties:
      environment:
        type: string
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: string
      version:
        type: string
    type: object
  models.AuditLogRequest:
    properties:
      cluster_context:
        type: string
      execution_result:
        additionalProperties: true
        type: object
      execution_status:
        enum:
        - success
        - failed
        - cancelled
        type: string
      generated_command:
        type: string
      ip_address:
        type: string
      namespace_context:
        type: string
      query_text:
        type: string
      safety_level:
        enum:
        - safe
        - warning
        - dangerous
        type: string
      session_id:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    required:
    - execution_status
    - generated_command
    - query_text
    - safety_level
    type: object
  models.BackupStatus:
    enum:
    - running
    - completed
    - failed
    - expired
    type: string
    x-enum-varnames:
    - BackupStatusRunning
    - BackupStatusCompleted
    - BackupStatusFailed
    - BackupStatusExpired
  models.BackupType:
    enum:
    - full
    - incremental
    - differential
    type: string
    x-enum-varnames:
    - BackupTypeFull
    - BackupTypeIncremental
    - BackupTypeDifferential
  models.BroadcastMessage:
    properties:
      headers:
        additionalProperties:
          type: string
        type: object
      path:
        type: string
      payload: {}
      service_name:
        type: string
      timeout:
        example: 30s
        format: duration
        type: string
    type: object
  models.ClusterHealth:
    properties:
      checked_at:
        type: string
      connection_pools:
        type: integer
      failover_active:
        type: boolean
      last_failover:
        type: string
      primary_healthy:
        type: boolean
      replicas_healthy:
        type: integer
      status:
        $ref: '#/definitions/models.DatabaseStatus'
      total_connections:
        type: integer
      total_replicas:
        type: integer
    type: object
  models.CommandApproval:
    properties:
      approved_by_user_id:
        type: string
      command_execution_id:
        type: string
      created_at:
        type: string
      decided_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      reason:
        type: string
      requested_by_user_id:
        type: string
      status:
        description: pending, approved, rejected, expired
        type: string
    type: object
  models.CommandApprovalRequest:
    properties:
      decision:
        description: approve, reject
        type: string
      execution_id:
        type: string
      reason:
        type: string
      user_id:
        type: string
    type: object
  models.CommandExecutionRequest:
    properties:
      command:
        $ref: '#/definitions/models.KubernetesOperation'
      safety_level:
        type: string
      session_id:
        type: string
      user_id:
        type: string
    type: object
  models.ComponentHealth:
    properties:
      message:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      status:
        $ref: '#/definitions/models.HealthStatusEnum'
      timestamp:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        - viewer
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.DatabaseBackup:
    properties:
      completed_at:
        type: string
      compressed:
        type: boolean
      created_at:
        type: string
      database_id:
        type: string
      encrypted:
        type: boolean
      expires_at:
        type: string
      id:
        type: string
      location:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      size:
        type: integer
      status:
        $ref: '#/definitions/models.BackupStatus'
      type:
        $ref: '#/definitions/models.BackupType'
    type: object
  models.DatabaseCluster:
    properties:
      created_at:
        type: string
      failover_config:
        $ref: '#/definitions/models.FailoverConfig'
      health:
        $ref: '#/definitions/models.ClusterHealth'
      id:
        type: string
      load_balancer:
        $ref: '#/definitions/models.LoadBalancer'
      name:
        type: string
      primary:
        $ref: '#/definitions/models.DatabaseInstance'
      replicas:
        items:
          $ref: '#/definitions/models.DatabaseInstance'
        type: array
      updated_at:
        type: string
    type: object
  models.DatabaseConfig:
    properties:
      conn_max_idle_time:
        example: 10m
        format: duration
        type: string
      conn_max_lifetime:
        example: 30m
        format: duration
        type: string
      database:
        type: string
      host:
        type: string
      max_idle_conns:
        type: integer
      max_open_conns:
        type: integer
      password:
        type: string
      port:
        type: integer
      read_timeout:
        example: 30s
        format: duration
        type: string
      ssl_mode:
        type: string
      timeout:
        example: 30s
        format: duration
        type: string
      user:
        type: string
      write_timeout:
        example: 30s
        format: duration
        type: string
    type: object
  models.DatabaseHealthCheck:
    properties:
      active_connections:
        type: integer
      checked_at:
        type: string
      consecutive_fails:
        type: integer
      idle_connections:
        type: integer
      is_connected:
        type: boolean
      last_error:
        type: string
      response_time:
        example: 10ms
        format: duration
        type: string
      waiting_connections:
        type: integer
    type: object
  models.DatabaseInstance:
    properties:
      config:
        $ref: '#/definitions/models.DatabaseConfig'
      health:
        $ref: '#/definitions/models.DatabaseHealthCheck'
      host:
        type: string
      id:
        type: string
      last_checked:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      port:
        type: integer
      role:
        allOf:
        - $ref: '#/definitions/models.DatabaseRole'
        description: '"primary", "replica", "standby"'
      status:
        $ref: '#/definitions/models.DatabaseStatus'
    type: object
  models.DatabaseMigration:
    properties:
      applied:
        type: boolean
      applied_at:
        type: string
      checksum:
        type: string
      description:
        type: string
      version:
        type: string
    type: object
  models.DatabaseRole:
    enum:
    - primary
    - replica
    - standby
    type: string
    x-enum-varnames:
    - DatabaseRolePrimary
    - DatabaseRoleReplica
    - DatabaseRoleStandby
  models.DatabaseStatus:
    enum:
    - healthy
    - unhealthy
    - maintenance
    - unknown
    type: string
    x-enum-varnames:
    - DatabaseStatusHealthy
    - DatabaseStatusUnhealthy
    - DatabaseStatusMaintenance
    - DatabaseStatusUnknown
  models.ExecutionStats:
    properties:
      average_time_ms:
        type: number
      failed_ones:
        type: integer
      from:
        type: string
      most_used_resource:
        type: string
      successful_ones:
        type: integer
      to:
        type: string
      total_executions:
        type: integer
      user_id:
        type: string
    type: object
  models.FailoverConfig:
    properties:
      auto_failover:
        type: boolean
      enabled:
        type: boolean
      failover_timeout:
        example: 5m
        format: duration
        type: string
      failure_threshold:
        type: integer
      health_check_interval:
        example: 30s
        format: duration
        type: string
      max_failover_attempts:
        type: integer
      recovery_check_interval:
        example: 60s
        format: duration
        type: string
    type: object
  models.GeoLocation:
    properties:
      asn:
        type: string
      city:
        type: string
      country:
        type: string
      isp:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      proxy:
        type: boolean
      region:
        type: string
      suspicious:
        type: boolean
      timezone:
        type: string
      tor:
        type: boolean
      vpn:
        type: boolean
    type: object
  models.HealthStatus:
    properties:
      components:
        additionalProperties:
          $ref: '#/definitions/models.ComponentHealth'
        type: object
      message:
        type: string
      metadata:
        additionalProperties: true
        type: object
      status:
        $ref: '#/definitions/models.HealthStatusEnum'
      timestamp:
        type: string
    type: object
  models.HealthStatusEnum:
    enum:
    - healthy
    - degraded
    - unhealthy
    - unknown
    type: string
    x-enum-varnames:
    - HealthStatusHealthy
    - HealthStatusDegraded
    - HealthStatusUnhealthy
    - HealthStatusUnknown
  models.KubernetesCommandExecution:
    properties:
      approval_id:
        type: string
      command:
        $ref: '#/definitions/models.KubernetesOperation'
      completed_at:
        type: string
      created_at:
        type: string
      error_message:
        type: string
      executed_at:
        type: string
      execution_time_ms:
        type: integer
      id:
        type: string
      result:
        $ref: '#/definitions/models.KubernetesOperationResult'
      safety_level:
        description: safe, warning, dangerous
        type: string
      session_id:
        type: string
      status:
        description: pending, approved, executing, completed, failed, timeout
        type: string
      user_id:
        type: string
    type: object
  models.KubernetesOperation:
    properties:
      context:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      namespace:
        type: string
      operation:
        type: string
      resource:
        type: string
      session_id:
        type: string
      user_id:
        type: string
    type: object
  models.KubernetesOperationResult:
    properties:
      backup_data:
        additionalProperties: true
        description: For rollback support
        type: object
      error:
        type: string
      executed_at:
        type: string
      operation_id:
        type: string
      previous_state:
        additionalProperties: true
        description: For rollback support
        type: object
      result: {}
      success:
        type: boolean
    type: object
  models.LoadBalancer:
    properties:
      health_check_interval:
        example: 30s
        format: duration
        type: string
      max_retries:
        type: integer
      read_write_split:
        type: boolean
      replica_weight:
        additionalProperties:
          type: integer
        type: object
      strategy:
        $ref: '#/definitions/models.LoadBalancingStrategy'
    type: object
  models.LoadBalancingStrategy:
    enum:
    - round_robin
    - random
    - least_connections
    - weighted
    - ip_hash
    type: string
    x-enum-varnames:
    - LoadBalancingRoundRobin
    - LoadBalancingRandom
    - LoadBalancingLeastConnections
    - LoadBalancingWeighted
    - LoadBalancingIPHash
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.PasswordPolicy:
    properties:
      lockout_duration_minutes:
        type: integer
      max_age_days:
        type: integer
      max_attempts:
        type: integer
      min_length:
        type: integer
      prevent_reuse_count:
        type: integer
      require_lowercase:
        type: boolean
      require_numbers:
        type: boolean
      require_special_chars:
        type: boolean
      require_uppercase:
        type: boolean
    type: object
  models.QueryInfo:
    properties:
      args:
        items: {}
        type: array
      duration:
        example: 10ms
        format: duration
        type: string
      error:
        type: string
      sql:
        type: string
    type: object
  models.RollbackExecution:
    properties:
      completed_at:
        type: string
      error:
        type: string
      execution_log:
        items:
          $ref: '#/definitions/models.RollbackStepResult'
        type: array
      id:
        type: string
      plan_id:
        type: string
      started_at:
        type: string
      status:
        description: executing, completed, failed, cancelled
        type: string
      user_id:
        type: string
    type: object
  models.RollbackPlan:
    properties:
      command_execution_id:
        type: string
      created_at:
        type: string
      estimated_duration:
        example: 30000000000
        format: int64
        type: integer
      expires_at:
        type: string
      id:
        type: string
      original_command:
        $ref: '#/definitions/models.KubernetesOperation'
      reason:
        type: string
      rollback_steps:
        items:
          $ref: '#/definitions/models.RollbackStep'
        type: array
      session_id:
        type: string
      status:
        description: planned, executing, completed, failed, cancelled, invalid
        type: string
      user_id:
        type: string
      validation:
        $ref: '#/definitions/models.RollbackValidation'
    type: object
  models.RollbackStatus:
    properties:
      completed_at:
        type: string
      current_step:
        type: string
      error:
        type: string
      progress:
        description: completion percentage (0-100)
        type: number
      rollback_id:
        type: string
      started_at:
        type: string
      status:
        type: string
      total_steps:
        type: integer
    type: object
  models.RollbackStep:
    properties:
      data:
        additionalProperties: true
        description: operation data (manifest, patch, etc.)
        type: object
      description:
        description: human readable description
        type: string
      name:
        description: resource name
        type: string
      namespace:
        description: resource namespace
        type: string
      operation:
        description: create, delete, patch, scale
        type: string
      resource:
        description: pods, services, deployments, etc.
        type: string
      step_number:
        type: integer
    type: object
  models.RollbackStepResult:
    properties:
      completed_at:
        type: string
      error:
        type: string
      name:
        type: string
      namespace:
        type: string
      operation:
        type: string
      output:
        type: string
      resource:
        type: string
      started_at:
        type: string
      status:
        description: executing, completed, failed
        type: string
      step_number:
        type: integer
    type: object
  models.RollbackValidation:
    properties:
      checked_at:
        type: string
      execution_id:
        type: string
      is_valid:
        type: boolean
      reasons:
        description: reasons why rollback is invalid
        items:
          type: string
        type: array
      warnings:
        description: non-blocking warnings
        items:
          type: string
        type: array
    type: object
  models.SecurityAction:
    enum:
    - allow
    - block
    - flag
    - alert
    - audit
    - lockout
    type: string
    x-enum-varnames:
    - SecurityActionAllow
    - SecurityActionBlock
    - SecurityActionFlag
    - SecurityActionAlert
    - SecurityActionAudit
    - SecurityActionLockout
  models.SecurityEvent:
    properties:
      action:
        $ref: '#/definitions/models.SecurityAction'
      blocked:
        type: boolean
      description:
        type: string
      details:
        additionalProperties: true
        type: object
      id:
        type: string
      ip_address:
        type: string
      location:
        $ref: '#/definitions/models.GeoLocation'
      metadata:
        additionalProperties:
          type: string
        type: object
      resolution:
        type: string
      resolved_at:
        type: string
      risk_score:
        description: 0-100
        type: integer
      session_id:
        type: string
      severity:
        $ref: '#/definitions/models.SecuritySeverity'
      source:
        type: string
      target:
        type: string
      timestamp:
        type: string
      type:
        $ref: '#/definitions/models.SecurityEventType'
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  models.SecurityEventType:
    enum:
    - login_attempt
    - login_success
    - login_failure
    - logout
    - password_change
    - account_lockout
    - suspicious_activity
    - rate_limit_exceeded
    - unauthorized_access
    - data_breach
    - injection_attempt
    - brute_force_attempt
    - csrf_attempt
    - xss_attempt
    - security_header_missing
    - encryption_failure
    - certificate_expiry
    type: string
    x-enum-varnames:
    - SecurityEventLoginAttempt
    - SecurityEventLoginSuccess
    - SecurityEventLoginFailure
    - SecurityEventLogout
    - SecurityEventPasswordChange
    - SecurityEventAccountLockout
    - SecurityEventSuspiciousActivity
    - SecurityEventRateLimitExceeded
    - SecurityEventUnauthorizedAccess
    - SecurityEventDataBreach
    - SecurityEventInjectionAttempt
    - SecurityEventBruteForceAttempt
    - SecurityEventCSRFAttempt
    - SecurityEventXSSAttempt
    - SecurityEventSecurityHeaderMissing
    - SecurityEventEncryptionFailure
    - SecurityEventCertificateExpiry
  models.SecuritySeverity:
    enum:
    - low
    - medium
    - high
    - critical
    type: string
    x-enum-varnames:
    - SecuritySeverityLow
    - SecuritySeverityMedium
    - SecuritySeverityHigh
    - SecuritySeverityCritical
  models.ServiceEvent:
    properties:
      correlation_id:
        type: string
      data: {}
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      source:
        type: string
      timestamp:
        type: string
      type:
        type: string
    type: object
  models.ServiceRegistration:
    properties:
      host:
        type: string
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      port:
        type: integer
      protocol:
        description: '"http", "https", "tcp", "grpc"'
        type: string
      tags:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  models.ServiceRequest:
    properties:
      body: {}
      headers:
        additionalProperties:
          type: string
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      method:
        type: string
      path:
        type: string
      service_name:
        type: string
      timeout:
        example: 30s
        format: duration
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@kubechat.dev
    name: KubeChat Support Team
    url: https://github.com/pramodksahoo/kubechat
  description: |-
    Kubernetes-native AI platform with multi-provider support for enterprise deployments

    This API provides comprehensive management capabilities for:
    - Kubernetes cluster operations and monitoring
    - Multi-provider AI/ML services (OpenAI, Anthropic, Google, Ollama)
    - Real-time WebSocket communication
    - Advanced cost tracking and budget management
    - Enterprise security and compliance features
    - Comprehensive audit logging and monitoring
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: KubeChat Enterprise Platform API
  version: 1.0.0
paths:
  /api/v1/commands/approvals/pending:
    get:
      description: List all pending command approvals that require user decision
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CommandApproval'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get pending approvals
      tags:
      - Commands
  /api/v1/commands/approve:
    post:
      consumes:
      - application/json
      description: Approve a command execution that requires approval
      parameters:
      - description: Approval request
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/models.CommandApprovalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommandApproval'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Approval not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Approve command execution
      tags:
      - Commands
  /api/v1/commands/execute:
    post:
      consumes:
      - application/json
      description: Execute a Kubernetes command with safety checks and approval workflow
      parameters:
      - description: Command execution request
        in: body
        name: command
        required: true
        schema:
          $ref: '#/definitions/models.CommandExecutionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.KubernetesCommandExecution'
        "202":
          description: Command requires approval
          schema:
            $ref: '#/definitions/models.CommandApproval'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Execute a Kubernetes command
      tags:
      - Commands
  /api/v1/commands/executions:
    get:
      description: List command executions with optional filtering by status and user
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of executions with pagination info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List command executions
      tags:
      - Commands
  /api/v1/commands/executions/{executionId}/rollback/plan:
    post:
      consumes:
      - application/json
      description: Create a rollback plan for a completed command execution
      parameters:
      - description: Command Execution ID
        in: path
        name: executionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RollbackPlan'
        "400":
          description: Invalid execution ID or execution not eligible for rollback
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Execution not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create rollback plan
      tags:
      - Rollback
  /api/v1/commands/executions/{executionId}/rollback/validate:
    get:
      description: Check if a command execution is eligible for rollback
      parameters:
      - description: Command Execution ID
        in: path
        name: executionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RollbackValidation'
        "400":
          description: Invalid execution ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Execution not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Validate rollback eligibility
      tags:
      - Rollback
  /api/v1/commands/executions/{id}:
    get:
      description: Retrieve details of a command execution by ID
      parameters:
      - description: Execution ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KubernetesCommandExecution'
        "400":
          description: Invalid execution ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Execution not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get command execution
      tags:
      - Commands
  /api/v1/commands/health:
    get:
      description: Check the health of command execution services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: Service unavailable
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - Health
  /api/v1/commands/stats:
    get:
      description: Get command execution statistics and analytics for a user
      parameters:
      - description: Start date (RFC3339 format)
        in: query
        name: from
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ExecutionStats'
        "400":
          description: Invalid date format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get execution statistics
      tags:
      - Analytics
  /api/v1/rollback/executions/{rollbackId}/status:
    get:
      description: Get the current status and progress of a rollback execution
      parameters:
      - description: Rollback Execution ID
        in: path
        name: rollbackId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RollbackStatus'
        "400":
          description: Invalid rollback ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Rollback not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get rollback status
      tags:
      - Rollback
  /api/v1/rollback/plans/{planId}/execute:
    post:
      consumes:
      - application/json
      description: Execute a rollback plan to revert a command execution
      parameters:
      - description: Rollback Plan ID
        in: path
        name: planId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.RollbackExecution'
        "400":
          description: Invalid plan ID or plan not executable
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Plan not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Execute rollback plan
      tags:
      - Rollback
  /audit/dangerous:
    get:
      description: Retrieves audit logs for operations classified as dangerous
      parameters:
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dangerous operations retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve dangerous operations
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get dangerous operations
      tags:
      - Audit & Compliance
  /audit/failed:
    get:
      description: Retrieves audit logs for operations that failed during execution
      parameters:
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Failed operations retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve failed operations
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get failed operations
      tags:
      - Audit & Compliance
  /audit/health:
    get:
      description: Performs a health check on the audit service and returns operational
        status
      produces:
      - application/json
      responses:
        "200":
          description: Audit service is operational
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Audit service health check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check audit service health
      tags:
      - Audit & Compliance
  /audit/logs:
    get:
      description: Retrieves audit logs with optional filtering by user, session,
        safety level, status, and time range
      parameters:
      - description: User ID to filter by
        in: query
        name: user_id
        type: string
      - description: Session ID to filter by
        in: query
        name: session_id
        type: string
      - description: Safety level (safe, warning, dangerous)
        in: query
        name: safety_level
        type: string
      - description: Execution status (success, failed, cancelled)
        in: query
        name: status
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 50
        description: Limit number of results (1-1000)
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit logs retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve audit logs
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit logs with filtering
      tags:
      - Audit & Compliance
    post:
      consumes:
      - application/json
      description: Creates a new audit log entry for tracking user actions
      parameters:
      - description: Audit log data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuditLogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Audit log created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create audit log
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new audit log entry
      tags:
      - Audit & Compliance
  /audit/logs/{id}:
    get:
      description: Retrieves a specific audit log entry by its ID
      parameters:
      - description: Audit log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit log retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid audit log ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Audit log not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit log by ID
      tags:
      - Audit & Compliance
  /audit/metrics:
    get:
      description: Returns performance metrics and statistics for the audit service
      produces:
      - application/json
      responses:
        "200":
          description: Audit service metrics
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get audit metrics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit service metrics
      tags:
      - Audit & Compliance
  /audit/summary:
    get:
      description: Returns summary statistics and analytics for audit logs within
        a time range
      parameters:
      - description: Start time for summary (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time for summary (RFC3339 format)
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Audit log summary retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get audit log summary
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit log summary statistics
      tags:
      - Audit & Compliance
  /audit/verify-integrity:
    post:
      consumes:
      - application/json
      description: Verifies the integrity of audit logs within a specified ID range
      parameters:
      - description: Integrity verification request
        in: body
        name: request
        required: true
        schema:
          properties:
            end_id:
              type: integer
            start_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Integrity verification completed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format or ID range
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Integrity check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Verify audit log integrity
      tags:
      - Audit & Compliance
  /auth/admin/users:
    get:
      description: Returns a list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Authentication
  /auth/admin/users/{id}:
    get:
      description: Returns detailed information about a specific user (admin only)
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username/email and password, returns session
        token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with session token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Login failed
          schema:
            additionalProperties: true
            type: object
      summary: User login authentication
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Logs out the current user and invalidates their session token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Authorization header required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Logout failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/me:
    get:
      description: Returns basic information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Current user information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to extract user context
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - Authentication
  /auth/profile:
    get:
      description: Returns detailed profile information for the current user
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get user profile
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes an existing session token with a new one
      parameters:
      - description: Session refresh request
        in: body
        name: request
        required: true
        schema:
          properties:
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Session refreshed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Token is required
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Session expired or invalid
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Refresh failed
          schema:
            additionalProperties: true
            type: object
      summary: Refresh user session
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Registration failed
          schema:
            additionalProperties: true
            type: object
      summary: Register new user account
      tags:
      - Authentication
  /communication/broadcast:
    post:
      consumes:
      - application/json
      description: Broadcasts a message to all instances of a specific service
      parameters:
      - description: Broadcast message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BroadcastMessage'
      produces:
      - application/json
      responses:
        "200":
          description: Message broadcasted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid broadcast message
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Broadcast failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Broadcast message to all service instances
      tags:
      - Service Communication
  /communication/call:
    post:
      consumes:
      - application/json
      description: Makes a call to another service using service discovery
      parameters:
      - description: Service call request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Service call successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid service call request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Service call failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Make an inter-service call
      tags:
      - Service Communication
  /communication/circuit-breakers:
    get:
      description: Returns the status of all circuit breakers in the system
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker status information
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get circuit breaker status
      tags:
      - Service Communication
  /communication/circuit-breakers/{serviceName}/reset:
    post:
      description: Resets a specific circuit breaker to closed state
      parameters:
      - description: Service name
        in: path
        name: serviceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker reset successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Service name is required
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset a circuit breaker
      tags:
      - Service Communication
  /communication/events/publish:
    post:
      consumes:
      - application/json
      description: Publishes an event to the event system for subscribers
      parameters:
      - description: Event data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ServiceEvent'
      produces:
      - application/json
      responses:
        "200":
          description: Event published successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid event data
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Event publish failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Publish a service event
      tags:
      - Service Communication
  /communication/events/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribes to events of a specific type in the event system
      parameters:
      - description: Subscription request
        in: body
        name: request
        required: true
        schema:
          properties:
            event_type:
              type: string
            webhook_url:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully subscribed to events
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid subscription request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Subscription failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Subscribe to service events
      tags:
      - Service Communication
  /communication/health:
    get:
      description: Returns health status and feature information for the communication
        service
      produces:
      - application/json
      responses:
        "200":
          description: Communication service health status
          schema:
            additionalProperties: true
            type: object
      summary: Get communication service health
      tags:
      - Service Communication
  /communication/load-balancer/strategies:
    get:
      description: Returns available load balancing strategies and their descriptions
      produces:
      - application/json
      responses:
        "200":
          description: Available load balancing strategies
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get load balancing strategies
      tags:
      - Service Communication
  /communication/load-balancer/test:
    post:
      consumes:
      - application/json
      description: Tests load balancing distribution for a specific service and strategy
      parameters:
      - description: Load balancing test request
        in: body
        name: request
        required: true
        schema:
          properties:
            requests:
              type: integer
            service_name:
              type: string
            strategy:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Load balancing test results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid test request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Service not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test load balancing strategy
      tags:
      - Service Communication
  /communication/metrics:
    get:
      description: Returns metrics and statistics for service-to-service communication
      produces:
      - application/json
      responses:
        "200":
          description: Communication metrics and statistics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get service communication metrics
      tags:
      - Service Communication
  /communication/patterns:
    get:
      description: Returns available communication patterns and their configurations
      produces:
      - application/json
      responses:
        "200":
          description: Available communication patterns
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get communication patterns
      tags:
      - Service Communication
  /communication/services:
    get:
      description: Returns a list of all services registered in the service registry
      produces:
      - application/json
      responses:
        "200":
          description: List of all services
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all registered services
      tags:
      - Service Communication
  /communication/services/{serviceId}:
    delete:
      description: Removes a service instance from the service registry
      parameters:
      - description: Service instance ID
        in: path
        name: serviceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service deregistered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Service ID is required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Service not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Deregister a service instance
      tags:
      - Service Communication
  /communication/services/discover/{serviceName}:
    get:
      description: Returns all available instances of a specific service
      parameters:
      - description: Service name to discover
        in: path
        name: serviceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service instances found
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Service name is required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Service not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Discover service instances
      tags:
      - Service Communication
  /communication/services/healthy/{serviceName}:
    get:
      description: Returns only healthy instances of a specific service
      parameters:
      - description: Service name
        in: path
        name: serviceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Healthy service instances
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Service name is required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No healthy services found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get healthy service instances
      tags:
      - Service Communication
  /communication/services/register:
    post:
      consumes:
      - application/json
      description: Registers a new service instance for service discovery
      parameters:
      - description: Service registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ServiceRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: Service registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid service registration data
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Service registration failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Register a new service instance
      tags:
      - Service Communication
  /database/backups:
    post:
      consumes:
      - application/json
      description: Initiates a database backup operation
      parameters:
      - description: Backup configuration
        in: body
        name: backup
        required: true
        schema:
          $ref: '#/definitions/models.DatabaseBackup'
      produces:
      - application/json
      responses:
        "202":
          description: Backup creation initiated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid backup configuration
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Backup creation failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create database backup
      tags:
      - Database Management
  /database/backups/{backupId}:
    get:
      description: Returns status information for a specific backup
      parameters:
      - description: Backup ID
        in: path
        name: backupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Backup status information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Backup not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get backup status
      tags:
      - Database Management
  /database/backups/{backupId}/restore:
    post:
      consumes:
      - application/json
      description: Restores a database from a backup to a target instance
      parameters:
      - description: Backup ID
        in: path
        name: backupId
        required: true
        type: string
      - description: Restore request
        in: body
        name: request
        required: true
        schema:
          properties:
            target_instance_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: Restore initiated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid restore request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Restore failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Restore from backup
      tags:
      - Database Management
  /database/clusters:
    get:
      description: Returns information about all database clusters
      produces:
      - application/json
      responses:
        "200":
          description: List of database clusters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get database clusters
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all database clusters
      tags:
      - Database Management
    post:
      consumes:
      - application/json
      description: Creates a new database cluster configuration
      parameters:
      - description: Database cluster configuration
        in: body
        name: cluster
        required: true
        schema:
          $ref: '#/definitions/models.DatabaseCluster'
      produces:
      - application/json
      responses:
        "201":
          description: Database cluster created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid cluster format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create database cluster
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create database cluster
      tags:
      - Database Management
  /database/clusters/{clusterId}:
    get:
      description: Returns information about a specific database cluster
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Database cluster information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Database cluster not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific database cluster
      tags:
      - Database Management
  /database/clusters/{clusterId}/connection/read:
    get:
      description: Tests connectivity to read-only database instances
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Read-only connection successful
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Read-only connection failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test read-only connection
      tags:
      - Database Management
  /database/clusters/{clusterId}/connection/write:
    get:
      description: Tests connectivity to read-write database instances
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Read-write connection successful
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Read-write connection failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test read-write connection
      tags:
      - Database Management
  /database/clusters/{clusterId}/failover:
    post:
      description: Triggers a manual failover for a database cluster
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Failover initiated successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to trigger failover
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Trigger database failover
      tags:
      - Database Management
  /database/clusters/{clusterId}/failover-status:
    get:
      description: Checks if a failover is currently in progress for a cluster
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Failover status information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to check failover status
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check failover status
      tags:
      - Database Management
  /database/clusters/{clusterId}/health:
    get:
      description: Returns health status for a database cluster
      parameters:
      - description: Database cluster ID
        in: path
        name: clusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cluster health information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get cluster health
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get cluster health status
      tags:
      - Database Management
  /database/health:
    get:
      description: Returns health status and feature information for the database
        service
      produces:
      - application/json
      responses:
        "200":
          description: Database service health status
          schema:
            additionalProperties: true
            type: object
      summary: Get database service health
      tags:
      - Database Management
  /database/instances:
    get:
      description: Returns information about all registered database instances
      produces:
      - application/json
      responses:
        "200":
          description: List of database instances
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get database instances
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all database instances
      tags:
      - Database Management
    post:
      consumes:
      - application/json
      description: Registers a new database instance in the system
      parameters:
      - description: Database instance configuration
        in: body
        name: instance
        required: true
        schema:
          $ref: '#/definitions/models.DatabaseInstance'
      produces:
      - application/json
      responses:
        "201":
          description: Database instance registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid instance format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to register database instance
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Register database instance
      tags:
      - Database Management
  /database/instances/{instanceId}:
    get:
      description: Returns information about a specific database instance
      parameters:
      - description: Database instance ID
        in: path
        name: instanceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Database instance information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Database instance not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific database instance
      tags:
      - Database Management
  /database/instances/{instanceId}/health:
    get:
      description: Performs a health check on a specific database instance
      parameters:
      - description: Database instance ID
        in: path
        name: instanceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Database health status
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Health check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check database instance health
      tags:
      - Database Management
  /database/metrics:
    get:
      description: Returns performance metrics and statistics for database operations
      produces:
      - application/json
      responses:
        "200":
          description: Database metrics and statistics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get database metrics
      tags:
      - Database Management
  /database/migrations:
    get:
      description: Returns status of all database migrations
      produces:
      - application/json
      responses:
        "200":
          description: Migration status information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get migration status
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get migration status
      tags:
      - Database Management
    post:
      consumes:
      - application/json
      description: Applies a database migration to update schema
      parameters:
      - description: Migration configuration
        in: body
        name: migration
        required: true
        schema:
          $ref: '#/definitions/models.DatabaseMigration'
      produces:
      - application/json
      responses:
        "200":
          description: Migration applied successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid migration format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Migration failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Apply database migration
      tags:
      - Database Management
  /database/pools:
    get:
      description: Returns information about all database connection pools
      produces:
      - application/json
      responses:
        "200":
          description: List of connection pools
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get connection pools
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all connection pools
      tags:
      - Database Management
    post:
      consumes:
      - application/json
      description: Creates a new database connection pool with specified configuration
      parameters:
      - description: Database configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/models.DatabaseConfig'
      produces:
      - application/json
      responses:
        "201":
          description: Connection pool created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid configuration format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create connection pool
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create database connection pool
      tags:
      - Database Management
  /database/pools/{poolId}:
    delete:
      description: Destroys a database connection pool and closes all connections
      parameters:
      - description: Connection pool ID
        in: path
        name: poolId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Connection pool destroyed successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to destroy connection pool
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Destroy connection pool
      tags:
      - Database Management
    get:
      description: Returns information about a specific database connection pool
      parameters:
      - description: Connection pool ID
        in: path
        name: poolId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Connection pool information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Connection pool not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific connection pool
      tags:
      - Database Management
  /database/pools/{poolId}/query:
    post:
      consumes:
      - application/json
      description: Executes a SQL query on a specific connection pool
      parameters:
      - description: Connection pool ID
        in: path
        name: poolId
        required: true
        type: string
      - description: Query request
        in: body
        name: request
        required: true
        schema:
          properties:
            args:
              items: {}
              type: array
            query:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Query executed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Query execution failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Execute database query
      tags:
      - Database Management
  /database/pools/{poolId}/stats:
    get:
      description: Returns detailed statistics for a specific connection pool
      parameters:
      - description: Connection pool ID
        in: path
        name: poolId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Connection pool statistics
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Pool not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get connection pool statistics
      tags:
      - Database Management
  /database/pools/{poolId}/transaction:
    post:
      consumes:
      - application/json
      description: Executes multiple SQL operations as a single transaction
      parameters:
      - description: Connection pool ID
        in: path
        name: poolId
        required: true
        type: string
      - description: Transaction request
        in: body
        name: request
        required: true
        schema:
          properties:
            operations:
              items:
                $ref: '#/definitions/models.QueryInfo'
              type: array
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Transaction executed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid transaction request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Transaction execution failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Execute database transaction
      tags:
      - Database Management
  /external/cost/summary:
    get:
      description: Returns comprehensive cost summary for external API usage with
        breakdown by provider
      parameters:
      - description: Start date (YYYY-MM-DD)
        format: date
        in: query
        name: start
        type: string
      - description: End date (YYYY-MM-DD)
        format: date
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cost summary with provider breakdown
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get cost summary
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get API usage cost summary
      tags:
      - External API Cost Management
  /external/health:
    get:
      description: Returns comprehensive health status for all external API providers
      produces:
      - application/json
      responses:
        "200":
          description: External APIs healthy
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Health check failed
          schema:
            additionalProperties: true
            type: object
      summary: Get overall external API health status
      tags:
      - External API Health
  /external/health/{apiName}:
    get:
      description: Returns detailed health information for a specific external API
        provider
      parameters:
      - description: API provider name
        enum:
        - openai
        - anthropic
        - google
        - ollama
        in: path
        name: apiName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API provider health status
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Health check failed
          schema:
            additionalProperties: true
            type: object
      summary: Get specific API provider health status
      tags:
      - External API Health
  /gateway/circuit-breakers:
    get:
      description: Returns status information for all circuit breakers in the gateway
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker status information
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get circuit breaker status
      tags:
      - API Gateway
  /gateway/circuit-breakers/{service}/reset:
    post:
      description: Resets a specific circuit breaker to closed state
      parameters:
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker reset successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Service name is required
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset circuit breaker
      tags:
      - API Gateway
  /gateway/circuit-breakers/{service}/trip:
    post:
      consumes:
      - application/json
      description: Manually trips a circuit breaker for testing purposes
      parameters:
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      - description: Reason for tripping
        in: body
        name: request
        required: true
        schema:
          properties:
            reason:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Circuit breaker tripped successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Trip circuit breaker
      tags:
      - API Gateway
  /gateway/health:
    get:
      description: Performs a health check on the API Gateway service
      produces:
      - application/json
      responses:
        "200":
          description: API Gateway is operational
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Gateway health check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check API Gateway health
      tags:
      - API Gateway
  /gateway/metrics:
    get:
      description: Returns comprehensive metrics and performance statistics for the
        API Gateway
      produces:
      - application/json
      responses:
        "200":
          description: API Gateway metrics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get API Gateway metrics
      tags:
      - API Gateway
  /gateway/rate-limits:
    get:
      description: Returns current rate limit status and statistics for all clients
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit status for all clients
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get rate limit status
      tags:
      - API Gateway
  /gateway/rate-limits/{client_ip}:
    delete:
      description: Resets the rate limit counter for a specific client IP address
      parameters:
      - description: Client IP address
        in: path
        name: client_ip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit reset successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Client IP is required
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset rate limit for client
      tags:
      - API Gateway
  /gateway/rate-limits/reset-all:
    post:
      description: Resets rate limit counters for all clients
      produces:
      - application/json
      responses:
        "200":
          description: All rate limits reset successfully
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset all rate limits
      tags:
      - API Gateway
  /gateway/status:
    get:
      description: Returns detailed status information including metrics, rate limits,
        and configuration
      produces:
      - application/json
      responses:
        "200":
          description: Comprehensive gateway status
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get comprehensive gateway status
      tags:
      - API Gateway
  /health:
    get:
      description: Returns basic health status and uptime information for the API
      produces:
      - application/json
      responses:
        "200":
          description: API health status
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: API health check
      tags:
      - Health
  /health/:
    get:
      consumes:
      - application/json
      description: Returns comprehensive health status of all system components
      produces:
      - application/json
      responses:
        "200":
          description: System healthy
          schema:
            $ref: '#/definitions/models.HealthStatus'
        "500":
          description: Health check failed
          schema:
            additionalProperties: true
            type: object
        "503":
          description: System degraded or unhealthy
          schema:
            $ref: '#/definitions/models.HealthStatus'
      summary: Get overall system health status
      tags:
      - Health
  /health/live:
    get:
      description: Simple liveness check for Kubernetes pod health monitoring
      produces:
      - application/json
      responses:
        "200":
          description: Service is alive
          schema:
            additionalProperties: true
            type: object
      summary: Kubernetes liveness probe endpoint
      tags:
      - Health
  /kubernetes/cluster:
    get:
      description: Returns basic information about the connected Kubernetes cluster
      produces:
      - application/json
      responses:
        "200":
          description: Cluster information
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get cluster information
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Kubernetes cluster information
      tags:
      - Kubernetes Operations
  /kubernetes/health:
    get:
      description: Verifies connectivity to the Kubernetes cluster
      produces:
      - application/json
      responses:
        "200":
          description: Kubernetes cluster is accessible
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Kubernetes cluster not accessible
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check Kubernetes connectivity
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces:
    get:
      description: Returns all available namespaces in the Kubernetes cluster
      produces:
      - application/json
      responses:
        "200":
          description: List of namespaces
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list namespaces
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List Kubernetes namespaces
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/configmaps:
    get:
      description: Returns all ConfigMaps in the specified namespace
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of ConfigMaps
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list ConfigMaps
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List ConfigMaps in namespace
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/configmaps/{name}:
    get:
      description: Returns detailed information about a specific ConfigMap
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: ConfigMap name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ConfigMap information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: ConfigMap not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific ConfigMap
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/deployments:
    get:
      description: Returns all deployments in the specified namespace
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deployments
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list deployments
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List deployments in namespace
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/deployments/{name}:
    get:
      description: Returns detailed information about a specific deployment
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Deployment name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deployment information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Deployment not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific deployment
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/deployments/{name}/restart:
    post:
      description: Restarts all pods in a deployment by triggering a rollout
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Deployment name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deployment restart initiated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to restart deployment
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Restart a deployment
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/deployments/{name}/scale:
    put:
      consumes:
      - application/json
      description: Scales a deployment to the specified number of replicas
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Deployment name
        in: path
        name: name
        required: true
        type: string
      - description: Scaling request
        in: body
        name: request
        required: true
        schema:
          properties:
            replicas:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Deployment scaling initiated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to scale deployment
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Scale a deployment
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/pods:
    get:
      description: Returns all pods in the specified namespace
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of pods
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list pods
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List pods in namespace
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/pods/{name}:
    delete:
      description: Deletes a specific pod from the cluster (dangerous operation)
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Pod name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pod deletion initiated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete pod
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a pod
      tags:
      - Kubernetes Operations
    get:
      description: Returns detailed information about a specific pod
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Pod name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pod information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Pod not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific pod
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/pods/{name}/logs:
    get:
      description: Returns logs from a specific pod and container
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Pod name
        in: path
        name: name
        required: true
        type: string
      - default: 100
        description: Number of lines to tail
        in: query
        name: tail_lines
        type: integer
      - description: Include timestamps in logs
        in: query
        name: timestamps
        type: boolean
      - description: Specific container name
        in: query
        name: container
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pod logs
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get pod logs
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get pod logs
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/secrets:
    get:
      description: Returns metadata for all Secrets in the namespace (data is not
        exposed)
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Secret metadata
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list Secrets
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List Secrets in namespace
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/services:
    get:
      description: Returns all services in the specified namespace
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of services
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list services
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List services in namespace
      tags:
      - Kubernetes Operations
  /kubernetes/namespaces/{namespace}/services/{name}:
    get:
      description: Returns detailed information about a specific service
      parameters:
      - description: Namespace name
        in: path
        name: namespace
        required: true
        type: string
      - description: Service name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Service information
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Service not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get specific service
      tags:
      - Kubernetes Operations
  /kubernetes/validate:
    post:
      consumes:
      - application/json
      description: Validates if a Kubernetes operation is allowed and safe to execute
      parameters:
      - description: Operation to validate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.KubernetesOperation'
      produces:
      - application/json
      responses:
        "200":
          description: Operation validation result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format or validation failed
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Operation not allowed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate Kubernetes operation
      tags:
      - Kubernetes Operations
  /nlp/classify:
    post:
      consumes:
      - application/json
      description: Classifies the safety level and risk of a kubectl command without
        full processing
      parameters:
      - description: Command classification request
        in: body
        name: request
        required: true
        schema:
          properties:
            command:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Command classified successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Classification error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Classify command safety level
      tags:
      - AI & NLP Services
  /nlp/health:
    get:
      description: Performs a health check on the NLP service and providers
      produces:
      - application/json
      responses:
        "200":
          description: NLP service is operational
          schema:
            additionalProperties: true
            type: object
        "503":
          description: NLP service health check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check NLP service health
      tags:
      - AI & NLP Services
  /nlp/metrics:
    get:
      description: Returns performance metrics and statistics for NLP operations
      produces:
      - application/json
      responses:
        "200":
          description: NLP service metrics
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get NLP metrics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get NLP service metrics
      tags:
      - AI & NLP Services
  /nlp/process:
    post:
      consumes:
      - application/json
      description: Processes a natural language query and converts it to Kubernetes
        commands
      parameters:
      - description: NLP query request
        in: body
        name: request
        required: true
        schema:
          properties:
            cluster_info:
              type: string
            context:
              type: string
            provider:
              type: string
            query:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Query processed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: NLP processing error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Process natural language query
      tags:
      - AI & NLP Services
  /nlp/providers:
    get:
      description: Returns a list of available NLP providers and their status
      produces:
      - application/json
      responses:
        "200":
          description: List of supported NLP providers
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get supported providers
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get supported NLP providers
      tags:
      - AI & NLP Services
  /nlp/validate:
    post:
      consumes:
      - application/json
      description: Validates a kubectl command for safety, correctness, and potential
        risks
      parameters:
      - description: Command validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            command:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Command validated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Command validation error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate kubectl command
      tags:
      - AI & NLP Services
  /performance/cache/{key}:
    delete:
      description: Removes a value from the cache by key
      parameters:
      - description: Cache key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cache value deleted successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete cache value
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete cache value
      tags:
      - Security & Authorization
    get:
      description: Retrieves a value from the cache by key
      parameters:
      - description: Cache key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cache value retrieved
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cache key not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get cache value
      tags:
      - Security & Authorization
    post:
      consumes:
      - application/json
      description: Stores a value in the cache with optional TTL
      parameters:
      - description: Cache key
        in: path
        name: key
        required: true
        type: string
      - description: Cache value and TTL
        in: body
        name: request
        required: true
        schema:
          properties:
            ttl:
              type: integer
            value: {}
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Cache value set successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to set cache value
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Set cache value
      tags:
      - Security & Authorization
  /performance/cache/stats:
    get:
      description: Returns cache performance statistics and hit/miss ratios
      produces:
      - application/json
      responses:
        "200":
          description: Cache statistics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get cache statistics
      tags:
      - Security & Authorization
  /performance/health:
    get:
      description: Returns health status of performance monitoring systems
      produces:
      - application/json
      responses:
        "200":
          description: Performance system health
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get performance system health
      tags:
      - Security & Authorization
  /performance/metrics:
    get:
      description: Returns system performance metrics and statistics
      produces:
      - application/json
      responses:
        "200":
          description: Performance metrics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get performance metrics
      tags:
      - Security & Authorization
  /security/alerts:
    get:
      description: Returns current security alerts and warnings
      produces:
      - application/json
      responses:
        "200":
          description: Security alerts list
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get security alerts
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get security alerts
      tags:
      - Security & Authorization
  /security/analyze-request:
    post:
      consumes:
      - application/json
      description: Analyzes an HTTP request for suspicious activity and security threats
      parameters:
      - description: Request analysis data
        in: body
        name: request
        required: true
        schema:
          properties:
            body:
              type: string
            headers:
              additionalProperties:
                type: string
              type: object
            ip_address:
              type: string
            method:
              type: string
            path:
              type: string
            session_id:
              type: string
            user_agent:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Request analysis results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Analysis failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Analyze request for threats
      tags:
      - Security & Authorization
  /security/events:
    get:
      description: Returns security events with optional filtering
      parameters:
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Security events list
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get security events
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get security events
      tags:
      - Security & Authorization
    post:
      consumes:
      - application/json
      description: Records a security event for monitoring and analysis
      parameters:
      - description: Security event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.SecurityEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Security event recorded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid event format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to record security event
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Record security event
      tags:
      - Security & Authorization
  /security/generate-token:
    post:
      description: Generates a cryptographically secure random token
      parameters:
      - default: 32
        description: Token length (1-128)
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Secure token generated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid length parameter
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to generate token
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Generate secure token
      tags:
      - Security & Authorization
  /security/hash-password:
    post:
      consumes:
      - application/json
      description: Creates a secure bcrypt hash of the provided password
      parameters:
      - description: Password to hash
        in: body
        name: request
        required: true
        schema:
          properties:
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password hashed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to hash password
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Hash password securely
      tags:
      - Security & Authorization
  /security/health:
    get:
      description: Returns health status of security subsystems
      produces:
      - application/json
      responses:
        "200":
          description: Security system health
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get security system health
      tags:
      - Security & Authorization
  /security/rate-limit/{identifier}:
    delete:
      description: Resets the rate limit counter for a specific identifier
      parameters:
      - description: Rate limit identifier
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit reset successfully
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset rate limit
      tags:
      - Security & Authorization
    get:
      description: Returns current rate limit status for a specific identifier
      parameters:
      - description: Rate limit identifier
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit status
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Rate limiter not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get rate limit status
      tags:
      - Security & Authorization
  /security/rate-limit/{identifier}/check:
    post:
      consumes:
      - application/json
      description: Checks if a request should be rate limited for a specific identifier
      parameters:
      - description: Rate limit identifier (IP, user ID, etc.)
        in: path
        name: identifier
        required: true
        type: string
      - description: Rate limit parameters
        in: body
        name: request
        required: true
        schema:
          properties:
            limit:
              type: integer
            window:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Rate limit check result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check rate limit status
      tags:
      - Security & Authorization
  /security/scan:
    post:
      description: Initiates a comprehensive security vulnerability scan
      produces:
      - application/json
      responses:
        "200":
          description: Security scan completed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Security scan failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Start security vulnerability scan
      tags:
      - Security & Authorization
  /security/sessions/cleanup:
    delete:
      description: Removes expired sessions from the security system
      produces:
      - application/json
      responses:
        "200":
          description: Sessions cleaned up
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cleanup expired sessions
      tags:
      - Security & Authorization
  /security/validate-headers:
    post:
      consumes:
      - application/json
      description: Validates HTTP security headers against security best practices
      parameters:
      - description: Headers to validate
        in: body
        name: request
        required: true
        schema:
          properties:
            headers:
              additionalProperties:
                type: string
              type: object
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Header validation results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate security headers
      tags:
      - Security & Authorization
  /security/validate-password:
    post:
      consumes:
      - application/json
      description: Validates a password against the configured security policy
      parameters:
      - description: Password validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            password:
              type: string
            policy:
              $ref: '#/definitions/models.PasswordPolicy'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password validation result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid password or policy
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate password against policy
      tags:
      - Security & Authorization
  /status:
    get:
      description: Returns comprehensive status information including service health
      produces:
      - application/json
      responses:
        "200":
          description: Detailed API status
          schema:
            additionalProperties: true
            type: object
      summary: Get detailed API status
      tags:
      - Health
  /websocket/broadcast:
    post:
      consumes:
      - application/json
      description: Broadcasts a message to all currently connected WebSocket clients
      parameters:
      - description: Broadcast message
        in: body
        name: request
        required: true
        schema:
          properties:
            payload:
              additionalProperties: true
              type: object
            type:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message broadcasted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Broadcast failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Broadcast to all clients
      tags:
      - WebSocket Communication
  /websocket/broadcast/topics:
    post:
      consumes:
      - application/json
      description: Broadcasts a message to all clients subscribed to specific topics
      parameters:
      - description: Topic broadcast message
        in: body
        name: request
        required: true
        schema:
          properties:
            payload:
              additionalProperties: true
              type: object
            topics:
              items:
                type: string
              type: array
            type:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message broadcasted to subscribers
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No subscribers found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Broadcast to topic subscribers
      tags:
      - WebSocket Communication
  /websocket/broadcast/user/{user_id}:
    post:
      consumes:
      - application/json
      description: Broadcasts a message to all connections of a specific user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Broadcast message
        in: body
        name: request
        required: true
        schema:
          properties:
            payload:
              additionalProperties: true
              type: object
            type:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message broadcasted to user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not connected
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Broadcast to specific user
      tags:
      - WebSocket Communication
  /websocket/clients:
    get:
      description: Returns information about all currently connected WebSocket clients
      produces:
      - application/json
      responses:
        "200":
          description: List of connected clients
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get connected WebSocket clients
      tags:
      - WebSocket Communication
  /websocket/clients/{id}:
    delete:
      description: Forcefully disconnects a specific WebSocket client
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Client disconnected successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Client ID is required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Client not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Disconnect WebSocket client
      tags:
      - WebSocket Communication
  /websocket/clients/{id}/subscriptions:
    get:
      description: Returns all topics that a specific client is subscribed to
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of client subscriptions
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Client ID is required
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get client subscriptions
      tags:
      - WebSocket Communication
  /websocket/clients/count:
    get:
      description: Returns the total number of currently connected WebSocket clients
      produces:
      - application/json
      responses:
        "200":
          description: Client count
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get connected client count
      tags:
      - WebSocket Communication
  /websocket/health:
    get:
      description: Performs a health check on the WebSocket service
      produces:
      - application/json
      responses:
        "200":
          description: WebSocket service is operational
          schema:
            additionalProperties: true
            type: object
        "503":
          description: WebSocket service health check failed
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check WebSocket service health
      tags:
      - WebSocket Communication
  /websocket/metrics:
    get:
      description: Returns performance metrics and statistics for WebSocket connections
      produces:
      - application/json
      responses:
        "200":
          description: WebSocket service metrics
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get WebSocket metrics
      tags:
      - WebSocket Communication
  /websocket/notify/system:
    post:
      consumes:
      - application/json
      description: Sends a system-wide notification to all connected clients
      parameters:
      - description: System notification data
        in: body
        name: request
        required: true
        schema:
          properties:
            description:
              type: string
            event_type:
              type: string
            priority:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: System notification sent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Send system notification
      tags:
      - WebSocket Communication
  /websocket/notify/user/{user_id}:
    post:
      consumes:
      - application/json
      description: Sends a personal notification to a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Notification data
        in: body
        name: request
        required: true
        schema:
          properties:
            data:
              additionalProperties: true
              type: object
            message:
              type: string
            priority:
              type: string
            title:
              type: string
            type:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Notification sent to user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not connected
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Send user notification
      tags:
      - WebSocket Communication
  /websocket/subscriptions/{topic}:
    get:
      description: Returns all clients subscribed to a specific topic
      parameters:
      - description: Topic name
        enum:
        - commands
        - system
        - user_activity
        - alerts
        - metrics
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of topic subscribers
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid topic
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get topic subscribers
      tags:
      - WebSocket Communication
  /ws:
    get:
      description: Upgrades HTTP connection to WebSocket for real-time communication
      responses:
        "101":
          description: WebSocket connection established
        "400":
          description: WebSocket upgrade failed
      summary: Upgrade to WebSocket connection
      tags:
      - WebSocket Communication
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API Key for service-to-service communication
    in: header
    name: X-API-Key
    type: apiKey
    x-extension-openapi: '{"example": "value"}'
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
